<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <artifactId>angularApp1</artifactId>
    <groupId>com.lessons</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>

  <artifactId>backend</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>backend</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <dependencyManagement>
    <!-- Set Spring Boot Dependencies -->
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>2.2.1.RELEASE</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>

    <dependency>
      <!-- Include the front-end as a dependency so the front-end is compiled *BEFORE* the backend is compiled -->
      <groupId>${project.groupId}</groupId>
      <artifactId>frontend</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <!-- Spring Boot Web -->
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>

      <exclusions>
        <exclusion>
          <!-- Remove Tomcat from Spring Boot -->
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>

        <exclusion>
          <!-- Remove logging from spring as we will use logback -->
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <!-- Add Dependency for the Undertow App Server -->
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-undertow</artifactId>

      <exclusions>
        <exclusion>
          <!-- Remove logging from undertow as we will use logback -->
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <!-- Send logging from Java Common Logging to SLF4J -->
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <version>1.7.5</version>
    </dependency>

    <dependency>
      <!-- SLF4J will use Logback-classic as its logging implementation -->
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.2.3</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>5.2.1.RELEASE</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>5.2.1.RELEASE</version>
    </dependency>

    <dependency>
      <!-- Implementation for converting objects to JSON -->
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.9.3</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>

    <plugins>
      <plugin>
        <!-- This plugin provides the tools needed to repackage the Spring Boot JAR into a runnable JAR
             Run this command to generate the runnable Spring Boot Jar
                mvn clean package  *or*
                mvn clean package spring-boot:repackage
         -->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>2.2.1.RELEASE</version>
        <configuration>
          <addResources>true</addResources>
        </configuration>

        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
            <configuration>
              <classifier>exec</classifier>
            </configuration>
          </execution>
        </executions>

      </plugin>
    </plugins>
  </build>


  <profiles>


  <!--    B U I L D     I M A G E    A N D     P U S H       P R O F I L E      (for running this app in a container)  -->
  <profile>
    <id>buildImageAndPush</id>

    <!-- When running this profile, do *NOT* include the src/main/resources/application.yaml in the build -->
    <build>
      <resources>
        <resource>
          <filtering>false</filtering>
          <directory>src/main/resources</directory>
          <excludes>
            <exclude>application.yaml</exclude>
          </excludes>
        </resource>
      </resources>

      <plugins>
        <plugin>
          <!-- Use the jib-maven-plugin to build the container and push it up to a registry [without having to install Docker] -->
          <groupId>com.google.cloud.tools</groupId>
          <artifactId>jib-maven-plugin</artifactId>
          <version>3.3.1</version>

          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <!-- Possible goals are build and dockerBuild   -->
                <!--   The "build"       goal does not require docker / build the image and push it to a repo                 -->
                <!--   The "dockerBuild" goal requires docker         / build the image and push to the local daemon daemon   -->
                <goal>build</goal>
              </goals>
            </execution>
          </executions>

          <configuration>
            <from>
              <!-- Define the source image that will be executed            -->
              <!-- See https://hub.docker.com/_/eclipse-temurin/tags        -->

              <!-- This source image runs linux with JDK 1.8-362             -->
              <!-- <image>eclipse-temurin:8u362-b09-jdk@sha256:3b83f3fc0d016d7536dfd5e8a98ece451061b7dbb6d5db3ddea2db30b6153b28</image>-->

              <!-- This source image runs linux with JDK 17.07 -->
              <image>eclipse-temurin:17.0.7_7-jdk@sha256:9dd6a19e4819b066aa2bd8e54d5988a49cca29736fe5447cb0a57daa975f8935</image>
            </from>

            <to>
              <!--                <image>527362555097.dkr.ecr.us-gov-west-1.amazonaws.com/poc:${project.artifactId}-${project.version}</image>-->
              <image>527362555097.dkr.ecr.us-gov-west-1.amazonaws.com/nccs:${project.artifactId}-${project.version}</image>
            </to>


            <extraDirectories>
              <paths>
                <path>
                  <!-- Copies everything from 'src/main/image_resources' into '/sync-service-/src/main/image_resources' on the container. -->
                  <from>src/main/image_resources</from>
                  <into>/backend/src/main/image_resources</into>
                </path>
              </paths>
            </extraDirectories>

            <container>
              <jvmFlags>
                <!-- When starting the container, tell Java where to find the application.yaml -->
                <jvmFlag> -Dspring.config.location=/backend/src/main/image_resources/application.yaml</jvmFlag>
              </jvmFlags>
            </container>

          </configuration>

        </plugin>
      </plugins>
    </build>
  </profile>
  </profiles>

</project>